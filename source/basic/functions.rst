Функции и алгоритмы
===================================================================

Алгоритм
--------

Набор действий/инструкций.
Конечен - завершается за конечное время.
Детерминирован - на каждом шаге известны все последующие шаги
Понятен ПК.

Функции
-------

Функция - агрегация набора действий под одним именем. Нужны только
программисту, для упрощения кодовой базы и повторного использования.

Определение функции::

   def <NAME>(<ARGS>):
      <BODY>

<NAME> - название функции. Идея аналогична названиям переменных
<ARGS> - аргументы функции. Те переменные, которые будут доступны в ней
<BODY> - тело функции. Тут записывается набор действий/инструкций или алгоритм.

По завершении работы, функция возвращает результат. Это может быть значение или
специальное значение - `None`, т.е. "ничто". Для указания что возвращать
используется слово `return`.

Пример функции x^2::

   def f(x):
      return x * x

Тут объявлена функция `f` которая принимает параметр `x` и возвращает квадрат
`x`.

Вызов функции
-------------

Для вызова (использования) функции указывают ее имя и круглые скобки с
параметрами. Если параметров нет, то круглые скобки все равно пишут - там
видно, что это вызов функции.

::

   result = f(12)
   print(result)

Здесь мы вызвали функцию с параметром `12` и записали результат ее вычислений в
переменную `result`. После этого, мы вызвали функцию `print`, дали ей результат
и, при выполнении на ПК, увидим на экране значение квадрата числа.

Область видимости
-----------------

