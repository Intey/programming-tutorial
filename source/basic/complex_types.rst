Тип Данных. Массивы. Словари
===================

Типы данных
-----------

С переменными есть одна особенность, которая по началу кажется странной и не
нужной. На самом деле, программисту по-большому счету, она нужна только для
самоконтроля и справки.
Эта особенность - типы переменных (данных). В ПК вообще все, что касается программы
- это нули и единицы, то встает вопрос как это все преобразовать в число, строку.
Чтобы подробнее разобраться в таком преобразовании, нужно углубиться в двоичную
систему счисления и перевод из нее в десятичную, а для строк - в кодировки
символов.
Тема достаточно сложная, поэтому попробуем ее рассмотреть с точки зрения
необходимости. Это необходимость - типы данных - связанна с тем, что пямяти у
компьютера ограниченно, а требуется она везде и всем. Поэтому нужно как-то
поделить ее, причем так чтобы хватило всем. Выдать всем по ровну - плохо, т.к.
кому то достаточно чуть-чуть, кому-то нужно почти все, но не надолго. Самый
лучший вариант - дать по столько, по скольку нужно. И это не так сложно - если
ввести ограничение на каждый тип данных по объему доступной пямяти для каждой
переменной этого типа, то для каждой программы понадобится пямяти столько,
сколько переменных используется в программе.
И так, мы пришли к ограничению по пямяти каждого типа данных. Рассмотрим пример.
Если мы дадим 1 байт для переменной целого числа мы сможем записать максимум
2^8 возможных чисел, потому что 1 байт, это 8 бит, а в 1 бит мы можем записать
максимум 2 числа: 0 или 1. А если мы хотим еще иметь возможно указать знак
числа, то под это нам понадобится 1 бит, значит на 1 степень меньше отдается
числу. Т.о. нужно выбрать какое-то определенное количество бит, которое будет
оптимально для любой ситуации. В каждом языке программирования, это разное
число, но чаще встречается 4 байта.

Массивы
-------

Хорошо, с числами более-менее просто, а как быть со строками: строки могут быть
разной длины. А еще нужно задаться вопросом размером алфавита, т.к. это тоже
повлияет на размер. И если с алфавит все более менее просто(выбираем опять же
"оптимальное", которое хватит всем), а вот с длинной не все так просто.
Чтобы разместить несколько символом вместе (в строку), нужно их организовать в
некий список, и хранить в памяти вместе, чтобы можно было легко понять какой
символ за каким следует. Такой список называется массивом. Массив состоит какбы
из нескольких переменных, которые располагаются вместе. Как с любым списком,
каждый его элемент пронумерован. Номер каждого элемента называется индексом.
Для создания массива, используется тот же принцип, как и с обычными
переменными, но значение уже будет две квадратные скобки это признак массива.
::

   x = []

Внутри скобок могут быть значения, т.е. мы сразу создает массив, наполненный
элементами
::

   x = [1]
   y = [1, 2]

Чтобы получить первый элемент массива, мы указываем имя переменной массива и
номер индекса в квадратных скобках. В программировании принято считать с нуля.
Поэтому, если мы хотим взять первый элемент, мы указываем индекс `0`
::

   x = [1, 2]
   y = x[0]

теперь в переменной `y` находится значение `1`, т.к. это число находится в
массиве `x` под индексом `0`.

Для изменения элемента массива, поступают аналогично как и с переменными.
Единственное отличие, чтобы ПК понимал, что мы записываем в элемент массива, а
не в саму переменную, мы указываем индекс. Например заменим второй элемент в массиве::

   x = [1, 2]
   x[1] = 14

Теперь в массиве находятся значения `1`, и `14`.

Строки
------

Теперь надеюсь появилось предположение, что строки - это массивы символов.
::

   s = "Hello"
   s[0]

`s[0]` - это буква `H`. `s[1]` - `e` и так далее.

Теперь, когда мы наконец познакомились со строками, мы можем создать массив строк::

   x = ["Hello", "World"]

Получается массив массивов. Или как еще говорят "двумерных" массив. В таком массиве, мы по индексу получаем нужную строку.
Если же мы хотим получить первый символ первого слова, можно пойти

Словари
-------

Если же мы хотим хранить например номера телефонов под именами их владельцев
(как в телефонной книжке), то мы можем воспользоваться другой структурой данных
- словарями

::

   notes = {
      "Иванова": "9829346473",
      "Петрова": "1286298788"
   }

Словари и массивы можно объеденить::

   users = [
      {"name": "Иванова", "phone": "9829346473"},
      {"name": "Петрова", "phone": "1286298788"}
   ]

Что почитать?
-------------

- `Wikipedia`_

.. _Wikipedia: https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)

Следующий урок: :doc:`./cycles_if`
